;/*******************************************************
;This program was created by the CodeWizardAVR V3.29
;Automatic Program Generator
;© Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : PLEASE_GOD_HELP_ME
;Version :
;Date    : 16/03/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega164P
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;// Timer 0 overflow interrupt service routine
;//tine minte logica invers
;char nrTotalPuls = 0;  //valoarea initiala
;char arrayOre[24]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
;char contorIn=0;
;char contorSec=0;
;char contorMin=0;
;char contorHr=1;
;char val_afisor;
;// variabila de verificare a butonului
;char button_pressed;
;char check_pulse; //modifica pini conform cerintei
;char cont_pulse=0;
;char in_semnal_p;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002B // Reinitialize Timer 0 value
; 0000 002C TCNT0=0x63;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002D //artificiu pentru demonstrare in simulator nu vrea sai mearga
; 0000 002E //pe orice alta frecventa
; 0000 002F //pentru frecventa de 20MHz TCNT0 ar trebui sa fie (pune aici vaoarea in hexa dorita pentru 10.086 ms)
; 0000 0030 // Place your code here
; 0000 0031 contorIn=contorIn+1;
;PCODE: $00000011 VOL: 0
; 0000 0032 if(contorIn%25==0){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0033 // contorIn pentru 4MHz si TCNT0 ales numara o secunda odata ce ajunge la valoarea de 25
; 0000 0034 //pentru 20Mhz ar trebui sa fie 100
; 0000 0035     contorSec=contorSec+1;
;PCODE: $00000018 VOL: 0
; 0000 0036     contorIn=0;
;PCODE: $00000019 VOL: 0
; 0000 0037 }
; 0000 0038 if(contorSec%60==0){
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0039     contorMin=contorMin+1;
;PCODE: $00000021 VOL: 0
; 0000 003A     contorSec=0;
;PCODE: $00000022 VOL: 0
; 0000 003B }
; 0000 003C if(contorMin%60==0){
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003D contorHr=contorHr+1;
;PCODE: $0000002A VOL: 0
; 0000 003E contorMin=0;
;PCODE: $0000002B VOL: 0
; 0000 003F }
; 0000 0040 arrayOre[contorHr]=nrTotalPuls;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0041  if(contorHr%24==0){
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0042   contorHr=1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0043   }
; 0000 0044 
; 0000 0045 
; 0000 0046 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;
;
;
;
;
;char get_Curent_state(void)
; 0000 004E  {    //citim cei 6 biti de la dsp pentru valoarea curentului
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004F   unsigned char val;
; 0000 0050 
; 0000 0051   val=PINB & 0b11000000;    //schimba in port C
;PCODE: $0000003F VOL: 0
;	val -> R17
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0052   val=val<<2;
;PCODE: $00000043 VOL: 0
; 0000 0053   val=2>>val;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0054   //shiftam biti pentru a avea doar codul de stare pentru LEDuri
; 0000 0055   return val;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0056  }
;PCODE: $0000004B VOL: 0
;
;void LED_Stare_Curent(void)
; 0000 0059 {char LEDstate;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005A LEDstate=get_Curent_state();
;PCODE: $0000004E VOL: 0
;	LEDstate -> R17
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005B  if(LEDstate==0b11111110){   //schimba in port D2, D3, D4
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 005C  PORTB=0b11111110;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005D  }else if(LEDstate==0b11111101){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005E  PORTB=0b11111101;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005F  }else if(LEDstate==0b11111011){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0060  PORTB=0b11111011;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0061  }
; 0000 0062  else {
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0063  PORTB=0xFF;// nu ne afiseaza niciun led
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0064  }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0065 //aceasta functie preia valoarea trimisa de dsp( valorile sunt intre anumite nivele
; 0000 0066 //exemplu nivel 0 (LED0) corespunde unei valori intre (10mA-100mA) s.s.m.d.
; 0000 0067 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;/*
;void Afisor_2Cifre(int value){  //vei lua PORTA complet, PortD7,portB 0->4 14 biti pentur 2 cifre 7 biti din port A o sa ...
;//placeholder pentru porti liberi pentru 2 cifre
; cifra0=value%10;
; cifra1=(value/10)%10;
;if(cifra0==0)
;esle if(cifra0==1)
;else if(cifra0==2)
;else if(cifra0==3)
;else if(cifra0==4)
;else if(cifra0==5)
;else if(cifra0==6)
;else if(cifra0==7)
;else if(cifra0==8)
;else if(cifra0==9)
;
;if(cifra1==0)
;else if(cifra1==1)
;else if(cifra1==2)
;else if(cifra1==3)
;else if(cifra1==4)
;else if(cifra1==5)
;else if(cifra1==6)
;else if(cifra1==7)
;else if(cifra1==8)
;else if(cifra1==8)
;}
;*/
;
;
;
;char ValAfisorButon(void){
; 0000 0087 char ValAfisorButon(void){
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0088 char SUMA;
; 0000 0089 //ar trebui sa ma mai gandesc cu butonul ca un fel de multi switch ca nu e un switch
; 0000 008A //ar trebui sa il pun intr-o
; 0000 008B char buffer_calc;
; 0000 008C char i;
; 0000 008D if(button_pressed==0)//buton apasat   butonul este PportD5, cu portD6 allways on
;PCODE: $00000070 VOL: 0
;	SUMA -> R17
;	buffer_calc -> R16
;	i -> R19
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 008E //fa astfel incat daca butonul a fost apasat sa ne arate 12 ore de consum cat timp e apasat si daca "nu a fost apasat" s ...
; 0000 008F  {
; 0000 0090   SUMA=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0091   if(contorHr>8)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0092   {      buffer_calc=contorHr-8;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0093   for(i=buffer_calc;i<=contorHr;i++)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0094   {   SUMA=SUMA+arrayOre[i];
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0095   }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0096   }
; 0000 0097   else{
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0098     buffer_calc=8-contorHr;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0099     for(i=24-buffer_calc;i<=24;i++)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009A     { SUMA=SUMA+arrayOre[i];
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 009B     }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 009C     for(i=1;i<=contorHr;i++){
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 009D     SUMA=SUMA+arrayOre[i];}
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 009E   }
;PCODE: $000000BD VOL: 0
; 0000 009F   return val_afisor=SUMA;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00A0   //sfarsitul functiei de 24 de ore
; 0000 00A1  }
; 0000 00A2    else
;PCODE: $000000C3 VOL: 0
; 0000 00A3   {SUMA=0;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00A4 
; 0000 00A5   if(contorHr>4)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00A6    {
; 0000 00A7    buffer_calc=contorHr-4;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00A8     for(i=buffer_calc;i<=contorHr;i++)
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00A9       {
; 0000 00AA       SUMA=SUMA+arrayOre[i];
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00AB       }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00AC     }
; 0000 00AD     else  {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AE        buffer_calc=4-contorHr;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00AF        for(i=24-buffer_calc;i<=24;i++)
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B0         {
; 0000 00B1         SUMA=SUMA+arrayOre[i];
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B2         }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00B3        for(i=1;i<=contorHr;i++)
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B4        {
; 0000 00B5        SUMA=SUMA+arrayOre[i];
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00B6        }
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00B7      // ar trebui sa ne arate consumul de kWh pentru ultimele 4 ore cat timp apasam
; 0000 00B8         }
;PCODE: $0000010E VOL: 0
; 0000 00B9    return val_afisor=SUMA;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00BA   }
;PCODE: $00000114 VOL: 0
; 0000 00BB }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;
;
;
;
;
;
;
;
;
;void main(void)
; 0000 00C6 {
;PCODE: $00000119 VOL: 0
; 0000 00C7 // Declare your local variables here
; 0000 00C8 
; 0000 00C9 // Crystal Oscillator division factor: 1
; 0000 00CA #pragma optsize-
; 0000 00CB CLKPR=(1<<CLKPCE);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00CC CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00CD #ifdef _OPTIMIZE_SIZE_
; 0000 00CE #pragma optsize+
; 0000 00CF #endif
; 0000 00D0 
; 0000 00D1 // Input/Output Ports initialization
; 0000 00D2 // Port A initialization
; 0000 00D3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00D4 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00D5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00D6 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00D7 
; 0000 00D8 // Port B initialization
; 0000 00D9 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00DA DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00DB // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00DC PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00DD 
; 0000 00DE // Port C initialization
; 0000 00DF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E0 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00E1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E2 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00E3 
; 0000 00E4 // Port D initialization
; 0000 00E5 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E6 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00E7 // State: Bit7=P Bit6=P Bit5=P Bit4=T Bit3=P Bit2=P Bit1=T Bit0=P
; 0000 00E8 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (1<<PORTD0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00E9 
; 0000 00EA // Timer/Counter 0 initialization
; 0000 00EB // Clock source: System Clock
; 0000 00EC // Clock value: 9.766 kHz
; 0000 00ED // Mode: Normal top=0xFF
; 0000 00EE // OC0A output: Disconnected
; 0000 00EF // OC0B output: Disconnected
; 0000 00F0 // Timer Period: 20.07 ms
; 0000 00F1 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F2 TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F3 TCNT0=0x3C;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00F4 OCR0A=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00F5 OCR0B=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00F6 
; 0000 00F7 // Timer/Counter 1 initialization
; 0000 00F8 // Clock source: System Clock
; 0000 00F9 // Clock value: Timer1 Stopped
; 0000 00FA // Mode: Normal top=0xFFFF
; 0000 00FB // OC1A output: Disconnected
; 0000 00FC // OC1B output: Disconnected
; 0000 00FD // Noise Canceler: Off
; 0000 00FE // Input Capture on Falling Edge
; 0000 00FF // Timer1 Overflow Interrupt: Off
; 0000 0100 // Input Capture Interrupt: Off
; 0000 0101 // Compare A Match Interrupt: Off
; 0000 0102 // Compare B Match Interrupt: Off
; 0000 0103 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0104 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0105 TCNT1H=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0106 TCNT1L=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0107 ICR1H=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0108 ICR1L=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0109 OCR1AH=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 010A OCR1AL=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 010B OCR1BH=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 010C OCR1BL=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 010D 
; 0000 010E // Timer/Counter 2 initialization
; 0000 010F // Clock source: System Clock
; 0000 0110 // Clock value: Timer2 Stopped
; 0000 0111 // Mode: Normal top=0xFF
; 0000 0112 // OC2A output: Disconnected
; 0000 0113 // OC2B output: Disconnected
; 0000 0114 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0115 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0116 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0117 TCNT2=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0118 OCR2A=0x00;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0119 OCR2B=0x00;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 011A 
; 0000 011B // Timer/Counter 0 Interrupt(s) initialization
; 0000 011C TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 011D 
; 0000 011E // Timer/Counter 1 Interrupt(s) initialization
; 0000 011F TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0120 
; 0000 0121 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0122 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0123 
; 0000 0124 // External Interrupt(s) initialization
; 0000 0125 // INT0: Off
; 0000 0126 // INT1: Off
; 0000 0127 // INT2: Off
; 0000 0128 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0129 // Interrupt on any change on pins PCINT8-15: Off
; 0000 012A // Interrupt on any change on pins PCINT16-23: Off
; 0000 012B // Interrupt on any change on pins PCINT24-31: Off
; 0000 012C EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 012D EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 012E PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 012F 
; 0000 0130 // USART0 initialization
; 0000 0131 // USART0 disabled
; 0000 0132 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0133 
; 0000 0134 // USART1 initialization
; 0000 0135 // USART1 disabled
; 0000 0136 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0137 
; 0000 0138 // Analog Comparator initialization
; 0000 0139 // Analog Comparator: Off
; 0000 013A // The Analog Comparator's positive input is
; 0000 013B // connected to the AIN0 pin
; 0000 013C // The Analog Comparator's negative input is
; 0000 013D // connected to the AIN1 pin
; 0000 013E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 013F ADCSRB=(0<<ACME);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0140 // Digital input buffer on AIN0: On
; 0000 0141 // Digital input buffer on AIN1: On
; 0000 0142 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0143 
; 0000 0144 // ADC initialization
; 0000 0145 // ADC disabled
; 0000 0146 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0147 
; 0000 0148 // SPI initialization
; 0000 0149 // SPI disabled
; 0000 014A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 014B 
; 0000 014C // TWI initialization
; 0000 014D // TWI disabled
; 0000 014E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 014F 
; 0000 0150 // Globally enable interrupts
; 0000 0151 #asm("sei")
;PCODE: $00000174 VOL: 0
; 0000 0152  check_pulse=PINC.0;//portile pentru primirea datelor
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0153  in_semnal_p=PINC.1;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0154 while (1)
;PCODE: $0000017B VOL: 0
; 0000 0155       {
; 0000 0156       LED_Stare_Curent();
;PCODE: $0000017C VOL: 0
; 0000 0157       if(check_pulse==0 ) //fal portC.0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0158       {
; 0000 0159         cont_pulse=0;
;PCODE: $0000017F VOL: 0
; 0000 015A         while(check_pulse!=1) // fal port C.1
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 015B           {if(in_semnal_p==0) // DSP ar trebui sa trimita semnal de genul 1110111
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 015C             {
; 0000 015D             cont_pulse=cont_pulse+1;
;PCODE: $00000186 VOL: 0
; 0000 015E             }
; 0000 015F           }
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0160       }
; 0000 0161       nrTotalPuls=cont_pulse;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0162       ValAfisorButon();
;PCODE: $0000018D VOL: 0
; 0000 0163       }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0164  }
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
