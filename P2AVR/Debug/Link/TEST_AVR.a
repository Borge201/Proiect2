;/*******************************************************
;This program was created by the CodeWizardAVR V3.29
;Automatic Program Generator
;© Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : PLEASE_GOD_HELP_ME
;Version :
;Date    : 16/03/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega164
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;// Timer 0 overflow interrupt service routine
;//char nrTotalPuls=0;
;//char arrayOre[24]
;char contorIn=0;
;char contorSec=0;
;char contorMin=0;
;char contorHr=0;
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026 // Reinitialize Timer 0 value
; 0000 0027 TCNT0=0x3C;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0028 // Place your code here
; 0000 0029 contorIn=contorIn+1;
;PCODE: $00000011 VOL: 0
; 0000 002A if(contorIn%50==0){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B     contorSec=contorSec+1;
;PCODE: $00000018 VOL: 0
; 0000 002C     contorIn=0;
;PCODE: $00000019 VOL: 0
; 0000 002D }
; 0000 002E if(contorSec%60==0){
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002F     contorMin=contorMin+1;
;PCODE: $00000021 VOL: 0
; 0000 0030     contorSec=0;
;PCODE: $00000022 VOL: 0
; 0000 0031 }
; 0000 0032 if(contorMin%60==0){
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0033 contorHr=contorHr+1;
;PCODE: $0000002A VOL: 0
; 0000 0034 contorMin=0;
;PCODE: $0000002B VOL: 0
; 0000 0035 }
; 0000 0036 //arrayOre[contorHr]=nrTotalpuls;
; 0000 0037  if(contorHr%23==0){
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038   contorHr=0;
;PCODE: $00000033 VOL: 0
; 0000 0039   }
; 0000 003A 
; 0000 003B 
; 0000 003C }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;
;
;
;
;
;
;/* char get_Curent(void)
; {    //citim cei 6 biti de la dsp pentru valoarea curentului
;  char val;
;  val=PINB & 0b00111111;
;
;  return val;
; }
;   */
;
;void main(void)
; 0000 004D {
;PCODE: $00000038 VOL: 0
; 0000 004E // Declare your local variables here
; 0000 004F 
; 0000 0050 // Crystal Oscillator division factor: 1
; 0000 0051 #pragma optsize-
; 0000 0052 CLKPR=(1<<CLKPCE);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0053 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0054 #ifdef _OPTIMIZE_SIZE_
; 0000 0055 #pragma optsize+
; 0000 0056 #endif
; 0000 0057 
; 0000 0058 // Input/Output Ports initialization
; 0000 0059 // Port A initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005E 
; 0000 005F // Port B initialization
; 0000 0060 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0061 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0062 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 0063 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0064 
; 0000 0065 // Port C initialization
; 0000 0066 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0068 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006A 
; 0000 006B // Port D initialization
; 0000 006C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 006D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006E // State: Bit7=P Bit6=P Bit5=P Bit4=T Bit3=P Bit2=P Bit1=T Bit0=P
; 0000 006F PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (1<<PORTD0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 0 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: 9.766 kHz
; 0000 0074 // Mode: Normal top=0xFF
; 0000 0075 // OC0A output: Disconnected
; 0000 0076 // OC0B output: Disconnected
; 0000 0077 // Timer Period: 20.07 ms
; 0000 0078 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0079 TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007A TCNT0=0x3C;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007B OCR0A=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007C OCR0B=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007D 
; 0000 007E // Timer/Counter 1 initialization
; 0000 007F // Clock source: System Clock
; 0000 0080 // Clock value: Timer1 Stopped
; 0000 0081 // Mode: Normal top=0xFFFF
; 0000 0082 // OC1A output: Disconnected
; 0000 0083 // OC1B output: Disconnected
; 0000 0084 // Noise Canceler: Off
; 0000 0085 // Input Capture on Falling Edge
; 0000 0086 // Timer1 Overflow Interrupt: Off
; 0000 0087 // Input Capture Interrupt: Off
; 0000 0088 // Compare A Match Interrupt: Off
; 0000 0089 // Compare B Match Interrupt: Off
; 0000 008A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008C TCNT1H=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008D TCNT1L=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008E ICR1H=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008F ICR1L=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0090 OCR1AH=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0091 OCR1AL=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0092 OCR1BH=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0093 OCR1BL=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0094 
; 0000 0095 // Timer/Counter 2 initialization
; 0000 0096 // Clock source: System Clock
; 0000 0097 // Clock value: Timer2 Stopped
; 0000 0098 // Mode: Normal top=0xFF
; 0000 0099 // OC2A output: Disconnected
; 0000 009A // OC2B output: Disconnected
; 0000 009B ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009C TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 009D TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009E TCNT2=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009F OCR2A=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A0 OCR2B=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A1 
; 0000 00A2 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00A3 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00A6 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A7 
; 0000 00A8 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00A9 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00AA 
; 0000 00AB // External Interrupt(s) initialization
; 0000 00AC // INT0: Off
; 0000 00AD // INT1: Off
; 0000 00AE // INT2: Off
; 0000 00AF // Interrupt on any change on pins PCINT0-7: Off
; 0000 00B0 // Interrupt on any change on pins PCINT8-15: Off
; 0000 00B1 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00B2 // Interrupt on any change on pins PCINT24-31: Off
; 0000 00B3 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00B4 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B5 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00B6 
; 0000 00B7 // USART0 initialization
; 0000 00B8 // USART0 disabled
; 0000 00B9 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00BA 
; 0000 00BB // USART1 initialization
; 0000 00BC // USART1 disabled
; 0000 00BD UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00BE 
; 0000 00BF // Analog Comparator initialization
; 0000 00C0 // Analog Comparator: Off
; 0000 00C1 // The Analog Comparator's positive input is
; 0000 00C2 // connected to the AIN0 pin
; 0000 00C3 // The Analog Comparator's negative input is
; 0000 00C4 // connected to the AIN1 pin
; 0000 00C5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C6 ADCSRB=(0<<ACME);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C7 // Digital input buffer on AIN0: On
; 0000 00C8 // Digital input buffer on AIN1: On
; 0000 00C9 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00CA 
; 0000 00CB // ADC initialization
; 0000 00CC // ADC disabled
; 0000 00CD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00CE 
; 0000 00CF // SPI initialization
; 0000 00D0 // SPI disabled
; 0000 00D1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00D2 
; 0000 00D3 // TWI initialization
; 0000 00D4 // TWI disabled
; 0000 00D5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00D6 
; 0000 00D7 // Globally enable interrupts
; 0000 00D8 #asm("sei")
;PCODE: $00000093 VOL: 0
; 0000 00D9 
; 0000 00DA while (1)
;PCODE: $00000094 VOL: 0
; 0000 00DB       {
; 0000 00DC       // Place your code here
; 0000 00DD 
; 0000 00DE       }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00DF }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
