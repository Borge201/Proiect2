;/*******************************************************
;This program was created by the CodeWizardAVR V3.29
;Automatic Program Generator
;© Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : PLEASE_GOD_HELP_ME
;Version :
;Date    : 16/03/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega164P
;Program type            : Application
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;// Timer 0 overflow interrupt service routine
;char nrTotalPuls = 0;  //valoarea initiala
;char arrayOre[24]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
;char contorIn=0;
;char contorSec=0;
;char contorMin=0;
;char contorHr=1;
;int val_afisor;
;// variabila de verificare a butonului
;char button_pressed;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028 // Reinitialize Timer 0 value
; 0000 0029 TCNT0=0x63;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002A //artificiu pentru demonstrare in simulator nu vrea sai mearga
; 0000 002B //pe orice alta frecventa
; 0000 002C //pentru frecventa de 20MHz TCNT0 ar trebui sa fie (pune aici vaoarea in hexa dorita pentru 10.086 ms)
; 0000 002D // Place your code here
; 0000 002E contorIn=contorIn+1;
;PCODE: $00000011 VOL: 0
; 0000 002F if(contorIn%25==0){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0030 // contorIn pentru 4MHz si TCNT0 ales numara o secunda odata ce ajunge la valoarea de 25
; 0000 0031 //pentru 20Mhz ar trebui sa fie 100
; 0000 0032     contorSec=contorSec+1;
;PCODE: $00000018 VOL: 0
; 0000 0033     contorIn=0;
;PCODE: $00000019 VOL: 0
; 0000 0034 }
; 0000 0035 if(contorSec%60==0){
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0036     contorMin=contorMin+1;
;PCODE: $00000021 VOL: 0
; 0000 0037     contorSec=0;
;PCODE: $00000022 VOL: 0
; 0000 0038 }
; 0000 0039 if(contorMin%60==0){
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003A contorHr=contorHr+1;
;PCODE: $0000002A VOL: 0
; 0000 003B contorMin=0;
;PCODE: $0000002B VOL: 0
; 0000 003C }
; 0000 003D arrayOre[contorHr]=nrTotalPuls;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003E  if(contorHr%24==0){
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003F   contorHr=1;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040   }
; 0000 0041 
; 0000 0042 
; 0000 0043 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;
;
;
;
;
;char get_Curent_state(void)
; 0000 004B  {    //citim cei 6 biti de la dsp pentru valoarea curentului
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004C   unsigned char val;
; 0000 004D 
; 0000 004E   val=PINB & 0b00111111;
;PCODE: $0000003F VOL: 0
;	val -> R17
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004F   val=val<<2;
;PCODE: $00000043 VOL: 0
; 0000 0050   val=2>>val;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0051   //shiftam biti pentru a avea doar codul de stare pentru LEDurile
; 0000 0052   return val;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0053  }
;PCODE: $0000004B VOL: 0
;
;void LED_Stare_Curent(void)
; 0000 0056 {char LEDstate;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0057 LEDstate=get_Curent_state();
;PCODE: $0000004E VOL: 0
;	LEDstate -> R17
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0058  if(LEDstate==0b000001){
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0059  PORTB=0b00000001;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005A  }else if(LEDstate==0b000010){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005B  PORTB=0b00000010;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005C  }else if(LEDstate==0b000010){
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005D  PORTB=0b00000100;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005E  }else if(LEDstate==0b000100){
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 005F  PORTB=0b00001000;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0060  }else if(LEDstate==0b001000){
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0061  PORTB=0b00010000;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0062  }else if(LEDstate==0b010000){
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0063  PORTB=0b00100000;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0064  }else if(LEDstate==0b100000){
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0065  PORTB=0b01000000;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0066  }else if(LEDstate==0b000011){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0067  PORTB=0b10000000;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0068  }else {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0069  PORTB=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006A  }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 006B //aceasta functie preia valoarea trimisa de dsp( valorile sunt intre anumite nivele
; 0000 006C //exemplu nivel 0 (LED0) corespunde unei valori intre (0A-100mA) s.s.m.d.
; 0000 006D }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;
;/*
;int ValAfisorButon(void){
;int SUMA;
;//ar trebui sa ma mai gandesc cu butonul ca un fel de multi switch ca nu e un switch
;//ar trebui sa il pun intr-o
;char buffer_calc;
;char i;
;if(button_pressed==0)//buton apasat
;//fa astfel incat daca butonul a fost apasat sa ne arate 12 ore de consum pentru 2 minute si daca "nu a fost apasat" sa  ...
; {
;  SUMA=0;
;  for(i=1;i<=24;i++)
;  {   SUMA=SUMA+arrayOre[i];
;  }
;  return val_afisor=SUMA;
;  //sfarsitul functiei de 24 de ore
; }
;   else
; {SUMA=0;
;
;  if(contorHr>12)
;   {
;   buffer_calc=contorHr-12;
;    for(i=buffer_calc;i<=contorHr;i++)
;      {
;      SUMA=SUMA+arrayOre[i];
;      }
;    }
;    else  {
;       buffer_calc=12-contorHr;
;       for(i=24-buffer_calc;i<=24;i++)
;        {
;        SUMA=SUMA+arrayOre[i];
;        }
;       for(i=1;i<=contorHr;i++)
;       {
;       SUMA=SUMA+arrayOre[i];
;       }
;
;    while(contorMin%2!=0)
;    {
;    return val_afisor=SUMA;
;    }
;
;
;  }
;
;  }
;
;  */
;
;
;
;
;
;
;
;
;void main(void)
; 0000 00AB {
;PCODE: $00000096 VOL: 0
; 0000 00AC // Declare your local variables here
; 0000 00AD 
; 0000 00AE // Crystal Oscillator division factor: 1
; 0000 00AF #pragma optsize-
; 0000 00B0 CLKPR=(1<<CLKPCE);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B1 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00B2 #ifdef _OPTIMIZE_SIZE_
; 0000 00B3 #pragma optsize+
; 0000 00B4 #endif
; 0000 00B5 
; 0000 00B6 // Input/Output Ports initialization
; 0000 00B7 // Port A initialization
; 0000 00B8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B9 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00BA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BB PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00BC 
; 0000 00BD // Port B initialization
; 0000 00BE // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 00BF DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00C0 // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=1
; 0000 00C1 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00C2 
; 0000 00C3 // Port C initialization
; 0000 00C4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00C5 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00C6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00C7 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00C8 
; 0000 00C9 // Port D initialization
; 0000 00CA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00CB DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00CC // State: Bit7=P Bit6=P Bit5=P Bit4=T Bit3=P Bit2=P Bit1=T Bit0=P
; 0000 00CD PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (1<<PORTD0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00CE 
; 0000 00CF // Timer/Counter 0 initialization
; 0000 00D0 // Clock source: System Clock
; 0000 00D1 // Clock value: 9.766 kHz
; 0000 00D2 // Mode: Normal top=0xFF
; 0000 00D3 // OC0A output: Disconnected
; 0000 00D4 // OC0B output: Disconnected
; 0000 00D5 // Timer Period: 20.07 ms
; 0000 00D6 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00D7 TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D8 TCNT0=0x3C;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00D9 OCR0A=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00DA OCR0B=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00DB 
; 0000 00DC // Timer/Counter 1 initialization
; 0000 00DD // Clock source: System Clock
; 0000 00DE // Clock value: Timer1 Stopped
; 0000 00DF // Mode: Normal top=0xFFFF
; 0000 00E0 // OC1A output: Disconnected
; 0000 00E1 // OC1B output: Disconnected
; 0000 00E2 // Noise Canceler: Off
; 0000 00E3 // Input Capture on Falling Edge
; 0000 00E4 // Timer1 Overflow Interrupt: Off
; 0000 00E5 // Input Capture Interrupt: Off
; 0000 00E6 // Compare A Match Interrupt: Off
; 0000 00E7 // Compare B Match Interrupt: Off
; 0000 00E8 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00E9 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00EA TCNT1H=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00EB TCNT1L=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00EC ICR1H=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00ED ICR1L=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EE OCR1AH=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00EF OCR1AL=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00F0 OCR1BH=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F1 OCR1BL=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00F2 
; 0000 00F3 // Timer/Counter 2 initialization
; 0000 00F4 // Clock source: System Clock
; 0000 00F5 // Clock value: Timer2 Stopped
; 0000 00F6 // Mode: Normal top=0xFF
; 0000 00F7 // OC2A output: Disconnected
; 0000 00F8 // OC2B output: Disconnected
; 0000 00F9 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00FA TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00FB TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00FC TCNT2=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00FD OCR2A=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00FE OCR2B=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FF 
; 0000 0100 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0101 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0102 
; 0000 0103 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0104 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0105 
; 0000 0106 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0107 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0108 
; 0000 0109 // External Interrupt(s) initialization
; 0000 010A // INT0: Off
; 0000 010B // INT1: Off
; 0000 010C // INT2: Off
; 0000 010D // Interrupt on any change on pins PCINT0-7: Off
; 0000 010E // Interrupt on any change on pins PCINT8-15: Off
; 0000 010F // Interrupt on any change on pins PCINT16-23: Off
; 0000 0110 // Interrupt on any change on pins PCINT24-31: Off
; 0000 0111 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0112 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0113 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0114 
; 0000 0115 // USART0 initialization
; 0000 0116 // USART0 disabled
; 0000 0117 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0118 
; 0000 0119 // USART1 initialization
; 0000 011A // USART1 disabled
; 0000 011B UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 011C 
; 0000 011D // Analog Comparator initialization
; 0000 011E // Analog Comparator: Off
; 0000 011F // The Analog Comparator's positive input is
; 0000 0120 // connected to the AIN0 pin
; 0000 0121 // The Analog Comparator's negative input is
; 0000 0122 // connected to the AIN1 pin
; 0000 0123 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0124 ADCSRB=(0<<ACME);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0125 // Digital input buffer on AIN0: On
; 0000 0126 // Digital input buffer on AIN1: On
; 0000 0127 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0128 
; 0000 0129 // ADC initialization
; 0000 012A // ADC disabled
; 0000 012B ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 012C 
; 0000 012D // SPI initialization
; 0000 012E // SPI disabled
; 0000 012F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0130 
; 0000 0131 // TWI initialization
; 0000 0132 // TWI disabled
; 0000 0133 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0134 
; 0000 0135 // Globally enable interrupts
; 0000 0136 #asm("sei")
;PCODE: $000000F1 VOL: 0
; 0000 0137 
; 0000 0138 while (1)
;PCODE: $000000F2 VOL: 0
; 0000 0139       {
; 0000 013A       // Place your code here
; 0000 013B 
; 0000 013C       }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 013D  }
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
